//#include <stdio.h>
#include "list.h"
#include "serial.h"
#include "rprintf.h"
#include "page.h"
#include "mmu.h"
extern int __bss_start;
extern int __bss_end;
void __bss_zero();
extern struct ppage* free_list;

int global;
#define NULL (void*)0

//MAIN
void kernel_main() {
    //mmu_on();
    // Worked on with Haris, "After freeing" does not print
    init_pfa_list();
    struct ppage* test = free_list;
    test = test->next;
    esp_printf(putc, "Physical Address: %x\n", test->physical_addr);
    test = allocate_physical_pages(2);
    esp_printf(putc, "Physical Pages --> %x \n", test);
    esp_printf(putc, "Physical Pages --> %x \n", test->physical_addr);
    free_physical_pages(test);
    test = free_list->next;
    esp_printf(putc, "After Pages are Freed: %x \n", test->physical_addr);
    esp_printf(putc, "After Pages are Freed: %x \n", test->physical_addr);
    
	while (1) {
    }
}



/*

struct listElement b = { NULL,NULL, 1 };
struct listElement a = { NULL,NULL, 7 };
struct listElement c = { NULL,NULL, 3 };
struct listElement* head = &a;
struct listElement* list = &a;


//Homework 1
void kernel_main() {
  
    __bss_zero();
	get_timer_count();
	listAdd(list, &b);
	listAdd(list, &c);
	listRemove(head, 1); 
     
	while (1) {
    }
}


//Homework 2 
//#define *mu_io_reg = 0x3F215040;
/*
void led_init();
void led_on();
void delay();
void led_off();
*/


void kernel_main() {
  
   led_init();
	while (1) {
		led_on();
        delay();
        led_off();
        delay();
       
    }
}

//Homework 5
void kernel_main() {
    int *mu_io_reg = 0x3F215040;
    *mu_io_reg = 'h';
    *mu_io_reg = 'w';
    esp_printf(putc, "Memory location for kernel main: %x \n", kernel_main);

	while (1) {
    }
}
